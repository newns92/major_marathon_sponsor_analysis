#arrange(desc(count)) %>%
#filter(count>5) %>%
ggplot(marathons,aes(x=country)) +
geom_bar() +
coord_cartesian(ylim=c(30,115))
filter(marathons,country=="Kenya")[which.min(filter(marathons,country=="Kenya")$year),]
marathons %>%
group_by(country, year) %>%
summarise(value = n()) %>%
mutate(csum = cumsum(value)) %>%
group_by(country) %>%
summarise(n = max(csum)) %>%
arrange(desc(n))
marathons %>%
group_by(country, year) %>%
summarise(value = n()) %>%
#mutate(csum = cumsum(value)) %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(x=year,color=country)) +#,group=country,col=country)) +
stat_bin(data=subset(marathons,country=="Kenya"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="Norway"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="West Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="United Kingdom"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="Japan"),aes(y=cumsum(..count..)),geom="line",lwd=1.25)+
stat_bin(data=subset(marathons,country=="United States"),aes(y=cumsum(..count..)),geom="line",lwd=1.25) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country")
marathons %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(country,time)) +
geom_jitter(aes(color = country),alpha=.6) +
geom_boxplot(aes(fill = country),alpha=.2,outlier.colour = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country")
medianTime <- median(marathons$time,na.rm=T)
marathons %>%
ggplot(aes(marathon,time)) +
#geom_jitter(aes(color = marathon),alpha=.6) +
geom_boxplot(aes(fill = marathon),alpha=.4, outlier.colour = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x="Country",y="Frequency",main="Total Major Marathon Wins by Country") +
#annotate('text', label=paste0('overall median: ', round(median(time))), x = 'MMI', y = median(time)+5, size = 3.5) +
geom_hline(aes(yintercept=medianTime), colour="red", linetype=2, lwd=1.25) +
coord_cartesian(ylim=c(as.POSIXct("2018-04-19 02:00:00"),as.POSIXct("2018-04-19 03:35:00")))
marathons %>%
left_join(marathons %>%
group_by(year) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = "year") %>%
ggplot(aes(year,minTime)) +
geom_line() +
geom_smooth()
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=15,na.rm=T)
marathons %>%
ggplot(aes(time)) +
geom_density(aes(group=gender,fill=gender),alpha=.4)
marathons %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(time)) +
geom_density(aes(group=country,fill=country),alpha=.4) +
scale_fill_brewer(palette = "Set2") #+
View(majorMarathons)
london <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_London_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
london_men <- london[[1]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_men
london <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_London_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
library(tidyverse)
library(rvest) # read HTML
library(purrr) # mapping?
tokyo <- read_html('https://en.wikipedia.org/wiki/Tokyo_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
berlin <- read_html('https://en.wikipedia.org/wiki/Berlin_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table(fill=T)
london <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_London_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
london_men <- london[[1]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_women <- london[[2]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Female",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_full <- bind_rows(london_men,london_women) %>%
mutate(marathon="London", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
london_full
source('C:/Users/snewn/Dropbox/majorMarathons/marathons.R', encoding = 'UTF-8', echo=TRUE)
library(tidyverse)
library(rvest) # read HTML
library(purrr) # mapping?
tokyo <- read_html('https://en.wikipedia.org/wiki/Tokyo_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
berlin <- read_html('https://en.wikipedia.org/wiki/Berlin_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table(fill=T)
london <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_London_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
boston <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_Boston_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
nyc <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_New_York_City_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
chicago <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_Chicago_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table(fill=T)
#**********************************************************************************************/
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrLeft <- function(x, n){
substr(x, 0, n)
}
#**********************************************************************************************/
tokyo_men <- tokyo[[2]][,1:4] %>%
rename(winner="Men's winner",country=Country,"time"="Time (m:s)",year=Year) %>%
mutate(year = substr(year,0,4),gender="Male",time=substrLeft(time,7))
tokyo_women <- tokyo[[2]][,c(1,5:7)] %>%
rename(winner="Women's winner",country=Country,"time"="Time (m:s)",year=Year) %>%
mutate(year = substr(year,0,4),gender="Female",time=substrLeft(time,7))
tokyo_full <- bind_rows(tokyo_men,tokyo_women) %>%
mutate(marathon="Tokyo", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
berlin_men <- berlin[[4]][,2:5] %>%
rename(winner="Male winner",country=Country,"time"="Time (h:m:s)") %>%
mutate(year = substrRight(Date,4),gender="Male",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
berlin_women <- berlin[[4]][,c(2,6:8)] %>%
rename(winner="Female winner",country=Country,"time"="Time (h:m:s)") %>%
mutate(year = substrRight(Date,4),gender="Female",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
berlin_full <- bind_rows(berlin_men,berlin_women) %>%
mutate(marathon="Berlin", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
nyc_men <- nyc[[1]] %>%
rename(winner="Winner",country=Country,"time"="Time",year=Year) %>%
mutate(gender="Male",time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
nyc_women <- nyc[[2]] %>%
rename(winner="Winner",country=Country,"time"="Time",year=Year) %>%
mutate(gender="Female",time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
nyc_full <- bind_rows(nyc_men,nyc_women) %>%
mutate(marathon="NYC", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
london_men <- london[[1]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_women <- london[[2]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Female",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_full <- bind_rows(london_men,london_women) %>%
mutate(marathon="London", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
boston_men <- boston[[2]] %>%
rename(winner=Athlete,country="Country/State","time"="Time",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
boston_women <- boston[[3]] %>%
rename(winner=Athlete,country="Country/State","time"="Time",year=Year) %>%
mutate(gender="Female",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
boston_full <- bind_rows(boston_men,boston_women) %>%
mutate(marathon="Boston", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
chicago_men <- chicago[[2]][,1:4] %>%
rename(winner="Male athlete",country=Country,"time"="Time") %>%
mutate(year = substrRight(Date,4),gender="Male",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
chicago_women <- chicago[[2]][,c(1,5:7)] %>%
rename(winner="Female athlete",country=Country,"time"="Time") %>%
mutate(year = substrRight(Date,4),gender="Female",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
chicago_full <- bind_rows(chicago_men,chicago_women) %>%
mutate(marathon="Chicago", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
#**********************************************************************************************/
rm(tokyo,tokyo_men,tokyo_women,chicago,chicago_men,chicago_women,boston,boston_men,boston_women,
berlin,berlin_men,berlin_women,london,london_men,london_women,nyc,nyc_men,nyc_women)
#**********************************************************************************************/
# south korea and 2017 2018 males not doubled?
for (i in 1:(nrow(boston_full))) {
# south korea athletes + 2017/2018 mens champs not doubled
boston_full$winner[i] <- if_else(boston_full$country[i] == "South Korea",boston_full$winner[i],
if_else(boston_full$year[i] %in% c(2017,2018) & boston_full$gender[i] == "Male",boston_full$winner[i],
substrRight(boston_full$winner[i],
# check for ties, then cut in half correctly based on even/odd # of characters
if_else(substrRight(boston_full$winner[i],5)=="(Tie)",
round(nchar(substrLeft(boston_full$winner[i],
nchar(boston_full$winner[i])-6))/2),
round(nchar(boston_full$winner[i])/2)))))
}
#head(boston_full)
for (i in 1:(nrow(london_full))) {
london_full$winner[i] <- substrRight(
# check for ties, then cut in half correctly based on even/odd # of characters
if_else(substrRight(london_full$winner[i],5)=="(Tie)",
substrLeft(london_full$winner[i],nchar(london_full$winner[i])-6),
london_full$winner[i]),
nchar(if_else(substrRight(london_full$winner[i],5)=="(Tie)",
substrLeft(london_full$winner[i],nchar(london_full$winner[i])-6),
london_full$winner[i]))/2)
}
#head(london_full)
### rest are even b/c doubled (any int * even int = even int)
for (i in 1:(nrow(berlin_full))) {
berlin_full$winner[i] <- substrRight(berlin_full$winner[i], round(nchar(berlin_full$winner[i])/2))
}
#head(berlin_full)
for (i in 1:(nrow(chicago_full))) {
chicago_full$winner[i] <- substrRight(chicago_full$winner[i], round(nchar(chicago_full$winner[i])/2))
}
#head(chicago_full)
#**********************************************************************************************/
# special ad-hoc final cleaning
tokyo_full$winner[16] <- "Noriko Higuchi" # footnote added to name?
# bad characters
chicago_full$winner[28] <- "Dita, Constantina"
# Due to sponsorship complications, the event was contested as a half marathon
chicago_full[81:82,] <- mutate(chicago_full[81:82,], gender=NA, year=1987, winner=NA,country=NA,time=NA)
chicago_full <- chicago_full %>% arrange(desc(year))
# hurricane sandy
nyc_full[11:12,] <- mutate(nyc_full[11:12,], gender=NA,winner=NA,country=NA,time=NA)
# random edits = nickname for Caffery, non-consistent middle initials (Ryan, Barron, Gibb = ???, split/not split last name (deBruyn)
# inconsistent names (Gosta), exclamation point (Hill)?
boston_full$winner[c(172,173,161,141,124,103,105,107,98,83)] <- c("Jack Caffery","Jack Caffery","Michael J. Ryan","Paul de Bruyn",
"Gösta Leandersson","Bobbi Gibb","Bobbi Gibb","Bobbi Gibb","Ron Hill",
"Gayle Barron")
# relay team?
boston_full[155,] <- mutate(boston_full[155,], gender=NA, winner=NA,country=NA,time=NA)
# fix doubled country's + the US, which includes state for some reason
boston_full <- boston_full %>%
mutate(country = if_else(str_detect(country, "United States"),"United States",
if_else(str_detect(country, "Canada"),"Canada",
if_else(str_detect(country, "Germany"),"Germany",
if_else(str_detect(country, "Greece"),"Greece",country)))))
#**********************************************************************************************/
#final binding
majorMarathons <- bind_rows(tokyo_full,berlin_full,boston_full,nyc_full,london_full,chicago_full) %>%
mutate(year=as.integer(year))
glimpse(majorMarathons)
saveRDS(majorMarathons, file="majorMarathons.Rda")
#  mutate(ifelse())
# "Gösta Leandersson" # why cutoff?
#16 = Michael J. Ryan # middle initial
#36 = Paul de Bruyn # split last name
#4,5, <- Jack Caffery # nicname
#74 <- Ron Hill # ! = ???
#124,125 <- Bobbi Gibb # where did middle a come from?
#135 <- S.Gayle Barron # middle initial?
View(majorMarathons)
library(tidyverse) # data cleaning and manipulation
library(ggplot2) # plotting
library(lubridate) # dates
library(RColorBrewer) # plotting colors
library(magrittr) # pipe operations
library(knitr) # kable()
library(gridExtra) # grid.arrange()
## load in data files for both races
philly17 <- read.csv("./data/cleanedMarathonTrainingData_philly17.csv", stringsAsFactors = F)
philly16 <- read.csv("./data/cleanedMarathonTrainingData_philly16.csv", stringsAsFactors = F)
# random missing month value?
philly16[17,"Month"] <- "Aug"
## combine into 1 dataset and remove redundant row
philly <- rbind(philly16,philly17)
philly %<>% select(-X) %>%
mutate(MarathonName = if_else(Marathon == "ph16","Philly 2016","Philly 2017"),
# make POSIXct again
Time = as.POSIXct(Time),
Avg.Pace = as.POSIXct(Avg.Pace),
Best.Pace = as.POSIXct(Best.Pace),
Date = as.POSIXct(Date),
StartTime = as.POSIXct(StartTime),
# make Month an ordered factor
Month = factor(Month, ordered = TRUE,
levels = c("Jul","Aug","Sep","Oct","Nov")))
philly %>%
group_by(MarathonName) %>%
summarize(Count = n()) %>%
rename("Marathon Name" = MarathonName) %>%
kable(caption = "Total Number of Runs")
ggplot(data = philly, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = MarathonName), colour = "black", boundary = 2) +
scale_fill_manual(values = c("red","#338dff")) + # custom colors
theme_bw() +
scale_x_continuous(limits = c(0, 30)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
guides(fill = F) +
facet_grid(~ MarathonName)
philly %>%
group_by(MarathonName,RunCat) %>%
summarize(Count = n()) %>%
spread(key = RunCat, value = Count) %>%
rename("Marathon Name" = MarathonName) %>%
kable(caption = "Total Number of Runs by Run Type")
philly %>%
filter(RunCat == "Misc") %>%
select(Name,Date,RunCat) %>%
rename("Run Name" = Name,
"Run Category" = RunCat) %>%
kable(caption = "Miscellaneous Runs")
philly %>%
filter(Marathon == "ph17") %>%
ggplot(aes(Date, Distance)) +
geom_bar(stat="identity", fill = "#338dff", colour = "black") +
theme_bw() +
xlab("Date") +
ylab("Miles") +
ggtitle("Runs Over Time: 2017") +
guides(fill = F) +
coord_cartesian(xlim = c(as.POSIXct("2017-09-05", format = "%Y-%m-%d"),
as.POSIXct("2017-10-25", format = "%Y-%m-%d")))
philly %>%
group_by(MarathonName) %>%
select(Distance) %>%
summarize(Mean = mean(Distance), Median = median(Distance), StdDev = sd(Distance),
Min = min(Distance), Max = max(Distance), Count = n()) %>%
rename("Marathon Name" = MarathonName) %>%
kable(caption = "Statistical Summaries of Training Blocks")
philly %>%
select(Month,MarathonName,Distance) %>%
group_by(Month,MarathonName) %>%
summarise(sum = sum(Distance)) %>%
ggplot(aes(x = Month, y = sum, fill = MarathonName)) +
geom_bar(stat = "identity", position = "dodge", colour = "black") +
scale_fill_manual(values = c("red","#338dff")) +
theme_bw() +
xlab("") +
ylab("Total Miles") +
ggtitle("Total Miles by Month")
philly %>%
filter(Month == "Nov") %>%
group_by(MarathonName) %>%
summarize(Count = n()) %>%
rename("Marathon Name" = MarathonName) %>%
kable(caption = "Total Number of Runs in November")
ggplot(data = philly, aes(Month, Avg.Cadence)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month), outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
xlab("") +
ylab("Avgerage Cadence (Steps/Min)") +
theme(legend.position = "none") +
ggtitle("Average Cadence by Month") +
facet_grid(~ MarathonName)
philly %>%
filter(Month %in% c("Jul","Aug"),
Marathon == "ph17") %>%
select(Name,Date,Avg.Cadence) %>%
arrange(Avg.Cadence) %>%
head(10) %>%
rename("Run Name" = Name,
"Average Cadence" = Avg.Cadence) %>%
kable(caption = "10 Runs with Lowest Average Cadence")
hr16 <- philly %>%
filter(Marathon == "ph16") %>%
ggplot(data = , aes(Date, Avg.HR)) +
geom_line(aes(group=1, colour = "red")) +
geom_smooth(method = "lm", se = T, colour = "red") +
theme(axis.text.x = element_blank(), legend.position = "none") +
xlab("2016") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate Over Time") +
coord_cartesian(ylim = c(100, 160))
hr17 <- philly %>%
filter(Marathon == "ph17") %>%
ggplot(data = , aes(Date, Avg.HR)) +
geom_line(aes(group=1), colour = "#338dff") +
geom_smooth(method = "lm", se = T, colour = "#338dff") +
theme(axis.text.x = element_blank(), legend.position = "none") +
xlab("2017") +
ylab("Average Heart Rate (BPM)") +
coord_cartesian(ylim = c(100, 160))
grid.arrange(hr16, hr17, nrow = 2)
ggplot(data = philly, aes(Month, Avg.HR)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month), outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme_bw() +
theme(legend.position = "none") +
xlab("Month") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate per Month") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(RunType, Avg.Cadence)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
theme_bw() +
theme(legend.position = "none") +
scale_colour_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
xlab("Run Type") +
ylab("Cadence (Steps/Min)") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Cadence per Run Type") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(Avg.Cadence, Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
scale_colour_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
theme_bw() +
xlab("Cadence (Steps/Min)") +
ylab("Average Heart Rate (BPM)") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(RunType, Avg.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
theme_bw() +
theme(legend.position = "none") +
xlab("Run Type") +
ylab("Average Heart Rate (BPM)") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Average Heart Rate per Run Type") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(x = as.POSIXct(paste(month(Date),'/',day(Date), sep=""),format="%m/%d"),
y = as.numeric(format(Avg.Pace, "%M")) + as.numeric(format(Avg.Pace, "%S"))/60,
colour = RunType)) +
scale_y_reverse(limits = c(9,7), breaks = c(9,8,7), labels = c("9:00","8:00","7:00")) +
geom_point() +
geom_smooth(fill = NA) +
scale_colour_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
theme_bw() +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(Elev.Gain, Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
theme_bw() +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Elevation Gain") +
facet_grid(~ MarathonName)
philly %>%
filter(RunType != "Race",
RunType != "Misc") %>%
ggplot(aes(Elev.Gain,Distance)) +
geom_point(aes(color = MarathonName)) +
geom_smooth(fill = NA, na.rm = TRUE) +
scale_colour_manual(values = c("red","#338dff")) +
theme_bw() +
theme(legend.position = "none") +
xlab("Distance (mi)") +
ylab("Elevation Gain (ft.)") +
ggtitle("Elevation Gain by Total Distance") +
facet_grid(~ MarathonName)
