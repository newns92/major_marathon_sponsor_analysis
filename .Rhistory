select(year,gender,minTime) %>%
filter(!is.na(gender),year>=1966) %>%
ggplot(aes(year,minTime)) +
geom_line(aes(colour=gender)) +
#geom_line(aes(group=gender,colour=gender))
facet_grid(~gender)
#+  geom_hline(yintercept = as.POSIXct(paste(Sys.Date(),"02:17:00")))
#+  geom_smooth()
marathons %>%
ggplot(aes(time)) +
geom_density(aes(group=gender,fill=gender),alpha=.4)
#library(scales)
marathons %>%
#filter(marathon %in% c("Berlin","Boston","Chicago")) %>%
ggplot() +
stat_density(aes(x=time,y=..scaled..,fill=marathon),color="black") +
#geom_histogram(aes(fill=marathon),bins=15) +
scale_fill_brewer(palette = "Set2") +
facet_wrap(~marathon) +
guides(fill=F) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#scale_y_continuous() +
marathons %>%
# filter(marathon %in% c("NYC","London","Tokyo")) %>%
ggplot(aes(year,time,color=marathon)) +
geom_smooth() +
#geom_smooth()
facet_wrap(~marathon, scales = "free_x")
marathons %>%
# filter(marathon %in% c("NYC","London","Tokyo")) %>%
ggplot(aes(year,time,color=marathon)) +
geom_smooth(se=F) +
#geom_smooth()
facet_wrap(~marathon) +#, scales = "free_x") +
coord_cartesian(xlim=c(2007,2017),ylim = c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"02:25:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=15,na.rm=T)
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=15,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=5,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=50,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=100,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=200,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=250,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
left_join(marathons %>%
group_by(year) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = "year") %>%
ggplot(aes(year,minTime)) +
geom_line() +
geom_smooth() +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
left_join(marathons %>%
group_by(year) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = "year") %>%
ggplot(aes(year,minTime)) +
geom_line() +
geom_smooth() +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"01:45:00")),as.POSIXct(paste(Sys.Date(),"03:30:00"))))
marathons %>%
left_join(marathons %>%
group_by(year) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = "year") %>%
ggplot(aes(year,minTime)) +
geom_line() +
geom_smooth() +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"01:45:00")),as.POSIXct(paste(Sys.Date(),"04:00:00"))))
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
#library(gridExtra)
marathons <- read_rds('majorMarathons.Rda')
glimpse(marathons)
View(marathons)
londonFemale18 <- c(as.integer(2018),"Vivian Cheruiyot","Female","Kenya",(paste(Sys.Date(),"02:18:31")),"London")
majorMarathons <- majorMarathons %>%
rbind(londonFemale18) %>%
mutate(year=as.integer(year))
library(tidyverse)
library(rvest) # read HTML
library(purrr) # mapping?
tokyo <- read_html('https://en.wikipedia.org/wiki/Tokyo_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
berlin <- read_html('https://en.wikipedia.org/wiki/Berlin_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table(fill=T)
london <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_London_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
boston <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_Boston_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
nyc <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_New_York_City_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table()
chicago <- read_html('https://en.wikipedia.org/wiki/List_of_winners_of_the_Chicago_Marathon') %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table') %>%
html_table(fill=T)
#**********************************************************************************************/
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrLeft <- function(x, n){
substr(x, 0, n)
}
#**********************************************************************************************/
tokyo_men <- tokyo[[2]][,1:4] %>%
rename(winner="Men's winner",country=Country,"time"="Time (m:s)",year=Year) %>%
mutate(year = substr(year,0,4),gender="Male",time=substrLeft(time,7))
tokyo_women <- tokyo[[2]][,c(1,5:7)] %>%
rename(winner="Women's winner",country=Country,"time"="Time (m:s)",year=Year) %>%
mutate(year = substr(year,0,4),gender="Female",time=substrLeft(time,7))
tokyo_full <- bind_rows(tokyo_men,tokyo_women) %>%
mutate(marathon="Tokyo", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
berlin_men <- berlin[[4]][,2:5] %>%
rename(winner="Male winner",country=Country,"time"="Time (h:m:s)") %>%
mutate(year = substrRight(Date,4),gender="Male",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
berlin_women <- berlin[[4]][,c(2,6:8)] %>%
rename(winner="Female winner",country=Country,"time"="Time (h:m:s)") %>%
mutate(year = substrRight(Date,4),gender="Female",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
berlin_full <- bind_rows(berlin_men,berlin_women) %>%
mutate(marathon="Berlin", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
nyc_men <- nyc[[1]] %>%
rename(winner="Winner",country=Country,"time"="Time",year=Year) %>%
mutate(gender="Male",time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
nyc_women <- nyc[[2]] %>%
rename(winner="Winner",country=Country,"time"="Time",year=Year) %>%
mutate(gender="Female",time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
nyc_full <- bind_rows(nyc_men,nyc_women) %>%
mutate(marathon="NYC", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
london_men <- london[[1]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_women <- london[[2]] %>%
rename(winner=Athlete,country=Nationality,"time"="Time\n(h:m:s)",year=Year) %>%
mutate(gender="Female",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
london_full <- bind_rows(london_men,london_women) %>%
mutate(marathon="London", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
boston_men <- boston[[2]] %>%
rename(winner=Athlete,country="Country/State","time"="Time",year=Year) %>%
mutate(gender="Male",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
boston_women <- boston[[3]] %>%
rename(winner=Athlete,country="Country/State","time"="Time",year=Year) %>%
mutate(gender="Female",winner=str_replace(winner,",",""),time=substrLeft(time,7)) %>%
select(year,winner,gender,country,time,-Notes)
boston_full <- bind_rows(boston_men,boston_women) %>%
mutate(marathon="Boston", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
chicago_men <- chicago[[2]][,1:4] %>%
rename(winner="Male athlete",country=Country,"time"="Time") %>%
mutate(year = substrRight(Date,4),gender="Male",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
chicago_women <- chicago[[2]][,c(1,5:7)] %>%
rename(winner="Female athlete",country=Country,"time"="Time") %>%
mutate(year = substrRight(Date,4),gender="Female",winner=str_replace(winner,",","")
,time=substrLeft(time,7)) %>%
select(-Date,year,winner,gender,country,time)
chicago_full <- bind_rows(chicago_men,chicago_women) %>%
mutate(marathon="Chicago", year=as.character(year),time=as.POSIXct(time, format = '%H:%M:%S')) %>%
select(year,winner,gender,country,time,marathon) %>%
arrange(desc(year))
#**********************************************************************************************/
rm(tokyo,tokyo_men,tokyo_women,chicago,chicago_men,chicago_women,boston,boston_men,boston_women,
berlin,berlin_men,berlin_women,london,london_men,london_women,nyc,nyc_men,nyc_women)
#**********************************************************************************************/
# south korea and 2017 2018 males not doubled?
for (i in 1:(nrow(boston_full))) {
# south korea athletes + 2017/2018 mens champs not doubled
boston_full$winner[i] <- if_else(boston_full$country[i] == "South Korea",boston_full$winner[i],
if_else(boston_full$year[i] %in% c(2017,2018) & boston_full$gender[i] == "Male",boston_full$winner[i],
substrRight(boston_full$winner[i],
# check for ties, then cut in half correctly based on even/odd # of characters
if_else(substrRight(boston_full$winner[i],5)=="(Tie)",
round(nchar(substrLeft(boston_full$winner[i],
nchar(boston_full$winner[i])-6))/2),
round(nchar(boston_full$winner[i])/2)))))
}
#head(boston_full)
for (i in 1:(nrow(london_full))) {
london_full$winner[i] <- substrRight(
# check for ties, then cut in half correctly based on even/odd # of characters
if_else(substrRight(london_full$winner[i],5)=="(Tie)",
substrLeft(london_full$winner[i],nchar(london_full$winner[i])-6),
london_full$winner[i]),
nchar(if_else(substrRight(london_full$winner[i],5)=="(Tie)",
substrLeft(london_full$winner[i],nchar(london_full$winner[i])-6),
london_full$winner[i]))/2)
}
#head(london_full)
### rest are even b/c doubled (any int * even int = even int)
for (i in 1:(nrow(berlin_full))) {
berlin_full$winner[i] <- substrRight(berlin_full$winner[i], round(nchar(berlin_full$winner[i])/2))
}
#head(berlin_full)
for (i in 1:(nrow(chicago_full))) {
chicago_full$winner[i] <- substrRight(chicago_full$winner[i], round(nchar(chicago_full$winner[i])/2))
}
#head(chicago_full)
#**********************************************************************************************/
# special ad-hoc final cleaning
tokyo_full$winner[16] <- "Noriko Higuchi" # footnote added to name?
# bad characters
chicago_full$winner[28] <- "Dita, Constantina"
# Due to sponsorship complications, the event was contested as a half marathon
chicago_full[81:82,] <- mutate(chicago_full[81:82,], gender=NA, year=1987, winner=NA,country=NA,time=NA)
chicago_full <- chicago_full %>% arrange(desc(year))
# hurricane sandy
nyc_full[11:12,] <- mutate(nyc_full[11:12,], gender=NA,winner=NA,country=NA,time=NA)
# random edits = nickname for Caffery, non-consistent middle initials (Ryan, Barron, Gibb = ???, split/not split last name (deBruyn)
# inconsistent names (Gosta), exclamation point (Hill)?
boston_full$winner[c(172,173,161,141,124,103,105,107,98,83)] <- c("Jack Caffery","Jack Caffery","Michael J. Ryan","Paul de Bruyn",
"Gösta Leandersson","Bobbi Gibb","Bobbi Gibb","Bobbi Gibb","Ron Hill",
"Gayle Barron")
# relay team?
boston_full[155,] <- mutate(boston_full[155,], gender=NA, winner=NA,country=NA,time=NA)
# fix doubled country's + the US, which includes state for some reason
boston_full <- boston_full %>%
mutate(country = if_else(str_detect(country, "United States"),"United States",
if_else(str_detect(country, "Canada"),"Canada",
if_else(str_detect(country, "Germany"),"Germany",
if_else(str_detect(country, "Greece"),"Greece",country)))))
#**********************************************************************************************/
#final binding
majorMarathons <- bind_rows(tokyo_full,berlin_full,boston_full,nyc_full,london_full,chicago_full) %>%
mutate(year=as.integer(year))
glimpse(majorMarathons)
londonFemale18 <- c(as.integer(2018),"Vivian Cheruiyot","Female","Kenya",(paste(Sys.Date(),"02:18:31")),"London")
majorMarathons <- majorMarathons %>%
rbind(londonFemale18) %>%
mutate(year=as.integer(year))
saveRDS(majorMarathons, file="majorMarathons.Rda")
write.csv(majorMarathons, file = "majorMarathons.csv",row.names=F)
# "Gösta Leandersson" # why cutoff?
#16 = Michael J. Ryan # middle initial
#36 = Paul de Bruyn # split last name
#4,5, <- Jack Caffery # nicname
#74 <- Ron Hill # ! = ???
#124,125 <- Bobbi Gibb # where did middle a come from?
#135 <- S.Gayle Barron # middle initial?
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(kableExtra)
#library(gridExtra)
marathons <- read_rds('majorMarathons.Rda')
glimpse(marathons)
marathons %>%
filter(!is.na(country)) %>%
group_by(country)%>%
summarise(count = n()) %>%
filter(count>10) %>%
ggplot(aes(country,count)) +
geom_bar(stat="identity",colour="Black",fill="Blue") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country")
marathons %>%
filter(!is.na(country)) %>%
group_by(winner,country,gender)%>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) %>%
kable()
marathons %>%
filter(winner %in% c("Bill Rodgers","Clarence DeMar","Grete Waitz","Ingrid Kristiansen","Paula Radcliffe")) %>%
group_by(winner,marathon) %>%
summarize(count = n()) %>%
kable()
marathons %>%
filter(!is.na(country),
year>=1981) %>%
group_by(country,gender) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
filter(count>5) %>%
ggplot(aes(country,count)) +
geom_bar(aes(fill=gender),stat="identity",colour="Black",position="dodge") +
scale_fill_manual("Gender", values = c("Male" = "blue", "Female" = "Red")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country by Gender")
#marathons %>%
# filter(!is.na(country),
#        year>=1966) %>%
# group_by(marathon,gender)%>%
#summarise(count = n()) %>%
# arrange(desc(count))
#marathons %>%
#  filter(!is.na(country),
#         year>=1966) %>%
#group_by(country,gender) %>%
#summarise(count = n()) %>%
#arrange(desc(count)) %>%
#filter(count>5) %>%
# ggplot(marathons,aes(x=country)) +
#   geom_bar() +
#  coord_cartesian(ylim=c(30,115))
#filter(marathons,country=="Kenya")[which.min(filter(marathons,country=="Kenya")$year),]
#marathons %>%
#group_by(country, year) %>%
#summarise(value = n()) %>%
#mutate(csum = cumsum(value)) %>%
#group_by(country) %>%
#summarise(n = max(csum)) %>%
#arrange(desc(n))
marathons %>%
group_by(country, year) %>%
summarise(value = n()) %>%
#mutate(csum = cumsum(value)) %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(x=year,color=country)) +#,group=country,col=country)) +
stat_bin(data=subset(marathons,country=="Kenya"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Norway"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="West Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="United Kingdom"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Japan"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="United States"),aes(y=cumsum(..count..)),geom="line",lwd=1.05) +
geom_point(aes(1967,37),size=3,color="purple") +  # bowerman = jogging
geom_point(aes(1972,48),size=3,color="purple") +
#geom_vline(xintercept=1972) +
geom_text(aes(x=1950, label="Frank Shorter (1972)", y=90), colour="blue", angle=0,
text=element_text(size=.25)) +
#geom_vline(xintercept=1984) +
geom_point(aes(1984,90),size=3,color="purple") +
geom_text(aes(x=2004, label="Joan Benoit (1984)", y=145), colour="red", angle=0,
text=element_text(size=.25)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_cartesian(ylim=c(0,150)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country")
#marathons %>%
#group_by(marathon) %>%
#summarise(first_year = min(year,na.rm=T))
marathons %>%
group_by(country, year) %>%
summarise(value = n()) %>%
#mutate(csum = cumsum(value)) %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(x=year,color=country)) +#,group=country,col=country)) +
stat_bin(data=subset(marathons,country=="Kenya"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Norway"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="West Germany"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="United Kingdom"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="Japan"),aes(y=cumsum(..count..)),geom="line",lwd=1.05)+
stat_bin(data=subset(marathons,country=="United States"),aes(y=cumsum(..count..)),geom="line",lwd=1.05) +
geom_point(aes(1984,87),size=3,color="purple") +
geom_text(aes(x=1986, label="Joan Benoit (1984)", y=98), colour="black", angle=0,
text=element_text(size=.25)) +
geom_point(aes(2008,35),size=3,color="#0d98ba") +
geom_text(aes(x=2008,y=43,label="Last UK Winner (2008)"), colour="black", angle=0,
text=element_text(size=.25)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_cartesian(xlim=c(1981,2017),ylim=c(0,150)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon Wins by Country")
#marathons %>%
#group_by(country) %>%
#summarize(last_winner = max(year,na.rm=T)) %>%
#filter(country=="United Kingdom")
marathons %>%
filter(country %in% c("Kenya","Norway","United States","United Kingdom","Germany","Ethiopia","West Germany","Japan")) %>%
ggplot(aes(country,time)) +
#geom_jitter(aes(color = country),alpha=.6) +
geom_boxplot(aes(fill = country),alpha=.2,outlier.colour = "black",varwidth = T) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Country") +
ylab("Frequency") +
ggtitle("Total Major Marathon time by Country")
medianTime <- median(marathons$time,na.rm=T)
#is_outlier <- function(x, na.rm=T) {
#  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
#}
marathons %>%
filter(!is.na(time)) %>%
#mutate(outlier = ifelse(is_outlier(time), year, as.numeric(NA))) %>%
ggplot(aes(marathon,time)) +
geom_boxplot(aes(fill = marathon),alpha=.4, outlier.colour = "black",varwidth = T) +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:35:00"))))
# + geom_text(aes(label = outlier), na.rm = TRUE, hjust = -0.3)
marathons %>%
ggplot(aes(marathon,time)) +
geom_boxplot(aes(fill = marathon),alpha=.4, outlier.shape = NA,varwidth = T) +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
ggplot(aes(time)) +
geom_histogram(bins=250,na.rm=T) +
coord_cartesian(xlim=c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"03:00:00"))))
marathons %>%
left_join(marathons %>%
group_by(year) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = "year") %>%
ggplot(aes(year,minTime)) +
geom_line() +
geom_smooth() +
coord_cartesian(ylim=c(as.POSIXct(paste(Sys.Date(),"01:45:00")),as.POSIXct(paste(Sys.Date(),"04:00:00"))))
marathons %>%
left_join(marathons %>%
group_by(year,gender) %>%
summarize(minTime = min(time,na.rm=T)) %>%
arrange(year),by = c("year","gender")) %>%
select(year,gender,minTime) %>%
filter(!is.na(gender),year>=1966) %>%
ggplot(aes(year,minTime)) +
geom_line(aes(colour=gender)) +
#geom_line(aes(group=gender,colour=gender))
facet_grid(~gender)
#+  geom_hline(yintercept = as.POSIXct(paste(Sys.Date(),"02:17:00")))
#+  geom_smooth()
marathons %>%
ggplot(aes(time)) +
geom_density(aes(group=gender,fill=gender),alpha=.4)
#library(scales)
marathons %>%
#filter(marathon %in% c("Berlin","Boston","Chicago")) %>%
ggplot() +
stat_density(aes(x=time,y=..scaled..,fill=marathon),color="black") +
#geom_histogram(aes(fill=marathon),bins=15) +
scale_fill_brewer(palette = "Set2") +
facet_wrap(~marathon) +
guides(fill=F) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#scale_y_continuous() +
marathons %>%
# filter(marathon %in% c("NYC","London","Tokyo")) %>%
ggplot(aes(year,time,color=marathon)) +
geom_smooth() +
#geom_smooth()
facet_wrap(~marathon, scales = "free_x")
marathons %>%
# filter(marathon %in% c("NYC","London","Tokyo")) %>%
ggplot(aes(year,time,color=marathon)) +
geom_smooth(se=F) +
#geom_smooth()
facet_wrap(~marathon) +#, scales = "free_x") +
coord_cartesian(xlim=c(2007,2017),ylim = c(as.POSIXct(paste(Sys.Date(),"02:00:00")),as.POSIXct(paste(Sys.Date(),"02:25:00"))))
#library(scales)
marathons %>%
#filter(marathon %in% c("Berlin","Boston","Chicago")) %>%
ggplot() +
stat_density(aes(x=time,y=..scaled..,group=gender,fill=gender),color="black") +
#geom_histogram(aes(fill=marathon),bins=15) +
scale_fill_brewer(palette = "Set2") +
facet_wrap(~marathon) +
guides(fill=F) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#scale_y_continuous() +
#library(scales)
marathons %>%
#filter(marathon %in% c("Berlin","Boston","Chicago")) %>%
ggplot() +
stat_density(aes(x=time,y=..scaled..,group=gender,fill=gender),color="black") +
#geom_histogram(aes(fill=marathon),bins=15) +
scale_fill_brewer(palette = "Set2") +
facet_wrap(~marathon) +
guides(fill=F) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#scale_y_continuous() +
